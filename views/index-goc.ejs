<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <script src="https://kit.fontawesome.com/5ae1e43049.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" type="text/css" href="/css/style.css">
    <title>Sewer Controller</title>
</head>

<body>
    <!-- <h1><%= name %></h1> -->
    <header class="header">
        <p class="header-name">Sewer Control</p>
        <p class="header-status">Status: <span id="connection">Not Connected</span></p>
    </header>
    <div class="wrapper">
        <div class="video-section">
            <img id=image src="" alt="">
        </div>
        <div class="control-section">
            <label for="">Current distance (cm)</label>
            <input id="get-distance" type="text" class="input" readonly name="get-distance">
            <label for="">Set distance (cm)</label>
            <input type="text" class="input" value="0" name="set-distance" id="set-distance">
            <div class="info-section">
                <p><b>Mode: </b><span id="control-mode">Remote Mode</span></p>
                <p><b>Sewer is </b><span id="sewer-state">Staying still</span></p>
            </div>
            <div class="button-section">
                <div id="button-up"><i class="arrow up"></i></div>
                <div id="button-stop" class="square"></div>
                <div id="button-down"><i class="arrow down"></i></div>
            </div>
        </div>

        <div>
            <a href="/logout">Logout</a>
        </div>
    </div>
    <footer class="footer">Copyright &copy;</footer>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"
        integrity="sha512-v8ng/uGxkge3d1IJuEo6dJP8JViyvms0cly9pnbfRxT6/31c3dRWxIiwGnMSWwZjHKOuY3EVmijs7k1jz/9bLA=="
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js" type="text/javascript"></script>
    <script>
        const socket = io.connect('http://104.155.233.176:3000/');

        socket.on('connect', () => {
            console.log(socket.id);
        });

        socket.on('imageSend', (image) => {
            console.log(image);
            //var strImg = String.fromCharCode.apply(null, new Uint8Array(image));
		//test
		var strImg = '';
    		var bytes = new Uint8Array( image );
     		var len = bytes.byteLength;
   		for (var i = 0; i < len; i++) {
       			strImg += String.fromCharCode( bytes[ i ] );
   		}
            const img = document.getElementById('image');
            img.src = `data:image/jpeg;base64,${strImg}`;
        })

    </script>

    <script>

        function startConnection() {
            // Define hostname, port number and topic
            var host = "104.155.233.176";
            var port = "4000";

            // Generate a random client ID
            clientID = "clientID_" + parseInt(Math.random() * 100);

            // Initialize new Paho client
            client = new Paho.MQTT.Client(host, Number(port), clientID);

            // Set callback handlers
            client.onConnectionLost = onConnectionLost;
            client.onMessageArrived = onMessageArrived;

            // Connect the client, if successful, call onConnect function
            client.connect({
                onSuccess: onConnect
            });
        }

        // Called when the client loses its connection
        function onConnectionLost(responseObject) {
            if (responseObject.errorCode !== 0) {
                console.log(responseObject.errorMessage);
            }
        }
        // Called when a message arrives
        function onMessageArrived(message) {
            console.log(message.destinationName + '  | ' + message.payloadString);
            if (message.destinationName == "info") {
                let info = message.payloadString;
                let infoLength = info.length;
                let infoExtract = info.slice(1, infoLength - 1);
                infoExtract = infoExtract.split(',');
                let getDistance = infoExtract[0];

                document.getElementById('get-distance').value = infoExtract[0];
                document.getElementById('control-mode').innerText = infoExtract[1];
                document.getElementById('sewer-state').innerText = infoExtract[2];
            }

            if (message.destinationName == "connection") {
                document.getElementById('connection').innerText = message.payloadString;
            }

            if (message.destinationName == "detection/frame") {
                //console.log(message.payloadString);
                //console.log(message.payloadBytes);
                //var strImg = String.fromCharCode.apply(null, new Uint8Array(message.payloadBytes));
                //const img = document.getElementById('image');
                //onsole.log(strImg);
                //img.src = `data:image/jpeg;base64,${strImg}`;
                //img.src = 'data:image/jpeg;base64,'+message.payloadString;
            }
        }

        // Called when the client connects
        function onConnect() {
            // Fetch the MQTT topic from the form
            var topic = "controller";
            console.log('topic: ' + topic);

            // Subscribe to the requested topic
            client.subscribe(topic);
            client.subscribe("info");
            client.subscribe("connection");
            // client.subscribe("detection/frame");
        }

        // Called when the disconnection button is pressed
        function startDisconnect() {
            client.disconnect();
        }

        function sendMessage(data) {
            var message = new Paho.MQTT.Message(data);
            message.destinationName = "controller";
            client.send(message);
        }

        startConnection();

        var closeSewerButton = document.getElementById("button-down");
        var openSewerButton = document.getElementById("button-up");
        var stopSewerButton = document.getElementById("button-stop");
        var currentDistance = document.getElementById("get-distance");

        openSewerButton.addEventListener("click", openSewer);
        closeSewerButton.addEventListener("click", closeSewer);
        stopSewerButton.addEventListener("click", stopSewer);

        function closeSewer() {
            let distance = document.getElementById("set-distance").value;
            distance = distance * 10;
            openSewerButton.style.opacity = "0.5";
            stopSewerButton.style.opacity = "0.5";
            closeSewerButton.style.opacity = "1";
            sendMessage(`{${distance},0}`);
        }

        function openSewer() {
            let distance = document.getElementById("set-distance").value;
            distance = distance * 10;
            openSewerButton.style.opacity = "1";
            stopSewerButton.style.opacity = "0.5";
            closeSewerButton.style.opacity = "0.5";
            sendMessage(`{${distance},1}`);
        }

        function stopSewer() {
            let distance = document.getElementById("set-distance").value;
            distance = distance * 10;
            openSewerButton.style.opacity = "0.5";
            stopSewerButton.style.opacity = "1";
            closeSewerButton.style.opacity = "0.5";
            sendMessage(`{${distance},2}`);
        }
    </script>
</body>

</html>
